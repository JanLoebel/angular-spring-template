'use strict';

var fs = require('fs'),
    parseString = require('xml2js').parseString,
    ngConstant = require('gulp-ng-constant-fork'),
    util = require('gulp-util');

module.exports =  {
    log : log,
    endsWith : endsWith,
    parseVersion : parseVersion,
    parseName : parseName,
    produceConstants: produceConstants
};

function endsWith(str, suffix) {
    return str.indexOf('/', str.length - suffix.length) !== -1;
};

function parseVersion() {
    // return the version number from `pom.xml` file
    var version;
    var pomXml = fs.readFileSync('pom.xml', 'utf8');
    parseString(pomXml, function (err, result) {
        if (result && result.project.version && result.project.version[0]) {
            version = result.project.version[0];
        } else if (result.project.parent && result.project.parent[0] && result.project.parent[0].version && result.project.parent[0].version[0]) {
            version = result.project.parent[0].version[0];
        } else {
            throw new Error('pom.xml is malformed. No version is defined!');
        }
    });
    return version;
};

function parseName() {
    // return the name from `pom.xml` file
    var name;
    var pomXml = fs.readFileSync('pom.xml', 'utf8');
    parseString(pomXml, function (err, result) {
        if (result && result.project.name && result.project.name[0]) {
            name = result.project.name[0];
        } else {
            throw new Error('pom.xml is malformed. No name is defined!');
        }
    });
    return name;
};

function produceConstants(name, env) {
    return ngConstant({
        dest: 'app.constants.js',
        name: 'app', // module name
        deps:   false,
        noFile: true,
        interpolate: /\{%=(.+?)%\}/g,
        wrap:
            '(function () {\n' +
            '    /* jshint quotmark: false */\n' +
            '    // jscs:disable validateQuoteMarks\n' +
            '    "use strict";\n' +
            '    // DO NOT EDIT THIS FILE, IT WILL BE GERNEATED!\n' +
            '    {%= __ngModule %}\n' +
            '})();\n',
        constants: {
            APP_NAME: name,
            ENV: env,
            VERSION: parseVersion()
        }
    });
};

function log(msg) {
    if (typeof(msg) === 'object') {
        for (var item in msg) {
            if (msg.hasOwnProperty(item)) {
                util.log(util.colors.blue(msg[item]));
            }
        }
    } else {
        util.log(util.colors.blue(msg));
    }
};
